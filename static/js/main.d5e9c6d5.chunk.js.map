{"version":3,"sources":["logo.svg","step.js","loader.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Step","react_default","a","createElement","this","props","name","description","requirements","map","element","key","toString","React","Component","ReqTypes","UsesUpType","type","amount","Object","classCallCheck","UsesUp","STARTING_MATERIALS","Set","STEPS","outputs","Loader","req","materials","console","log","has","steps","_this","nextMaterials","nextSteps","remainingSteps","forEach","step","satisfiesRequirement","reduce","acc","curr","push","concat","toConsumableArray","columns","counter","next","getNextColumn","getColumns","column","index","className","src_step","assign","App","loader","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d5e9c6d5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\n\r\n/* \r\n    {\r\n        name: \"File name change petition\",\r\n        description: \"Go to court and file a petition for name change!\",\r\n        requirements: [UsesUp(ReqTypes.MONEY, 50)],\r\n        outputs: [ReqTypes.INITIAL_COURT_ORDER],\r\n    },\r\n    */\r\n\r\nclass Step extends React.Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h3>{this.props.name}</h3>\r\n                <span>{this.props.description}</span>\r\n                <ul>\r\n                    {this.props.requirements.map(\r\n                        element =>\r\n                            <li key={element.toString()}>{element.toString()}</li>\r\n                    )}\r\n                </ul>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Step;","import React from 'react';\r\nimport Step from './step';\r\nimport './App.css';\r\n\r\nconst ReqTypes = {\r\n    \"MONEY\": 0,\r\n    \"THERAPIST\": 1,\r\n    \"PHYSICIAN\": 2,\r\n    \"THERAPIST_LETTER\": 3,\r\n    \"PHYSICIAN_LETTER\": 4,\r\n    \"COURT_ORDER\": 5,\r\n    \"SOCIAL_SECURITY_CARD\": 6,\r\n    \"MVA_LETTER\": 7,\r\n    \"DIGIAL_SOCIAL_SECURITY_UPDATE\": 8,\r\n    \"INITIAL_COURT_ORDER\": 9,\r\n    \"DRIVERS_LICENSE\": 10,\r\n    \"PASSPORT\": 11\r\n}\r\n\r\nclass UsesUpType {\r\n    constructor(type, amount) {\r\n        this.type = type;\r\n        this.amount = amount;\r\n    }\r\n\r\n    toString() {\r\n        return '' + this.amount + ' of ' + this.type;\r\n    }\r\n}\r\n\r\nfunction UsesUp(type, amount) {\r\n    return new UsesUpType(type, amount);\r\n}\r\n\r\nconst STARTING_MATERIALS = new Set([\r\n    ReqTypes.THERAPIST,\r\n    ReqTypes.PHYSICIAN,\r\n    ReqTypes.MONEY\r\n]);\r\n\r\nconst STEPS = [\r\n    {\r\n        name: \"File name change petition\",\r\n        description: \"Go to court and file a petition for name change!\",\r\n        requirements: [UsesUp(ReqTypes.MONEY, 50)],\r\n        outputs: [ReqTypes.INITIAL_COURT_ORDER],\r\n    },\r\n    {\r\n        name: \"Get copies of court order\",\r\n        description: \"Get a bunch of copies that you won't end up needing all of....\",\r\n        requirements: [ReqTypes.INITIAL_COURT_ORDER],\r\n        outputs: [ReqTypes.COURT_ORDER]\r\n    },\r\n    {\r\n        name: \"Request therapist letter\",\r\n        description: \"Get a therapist to give you a letter\",\r\n        requirements: [ReqTypes.THERAPIST],\r\n        outputs: [ReqTypes.THERAPIST_LETTER]\r\n    },\r\n    {\r\n        name: \"Request physician letter\",\r\n        description: \"Get a physician to give you a letter\",\r\n        requirements: [ReqTypes.PHYSICIAN],\r\n        outputs: [ReqTypes.PHYSICIAN_LETTER]\r\n    },\r\n    {\r\n        name: \"Go to Social Security\",\r\n        description: \"Thanks FDR\",\r\n        requirements: [UsesUp(ReqTypes.COURT_ORDER, 1), UsesUp(ReqTypes.PHYSICIAN_LETTER, 1)],\r\n        outputs: [ReqTypes.SOCIAL_SECURITY_CARD, ReqTypes.DIGIAL_SOCIAL_SECURITY_UPDATE]\r\n    },\r\n    {\r\n        name: \"Go to MVA HQ\",\r\n        description: \"Did you know Glen Burnie is actually still PG County?\",\r\n        requirements: [UsesUp(ReqTypes.PHYSICIAN_LETTER, 1), UsesUp(ReqTypes.THERAPIST_LETTER, 1)],\r\n        outputs: [ReqTypes.MVA_LETTER]\r\n    },\r\n    {\r\n        name: \"Go to MVA\",\r\n        description: \"Do that\",\r\n        requirements: [ReqTypes.DIGIAL_SOCIAL_SECURITY_UPDATE, UsesUp(ReqTypes.MVA_LETTER, 1)],\r\n        outputs: [ReqTypes.DRIVERS_LICENSE]\r\n    },\r\n    {\r\n        name: \"Go to passport place\",\r\n        description: \"Do that\",\r\n        requirements: [UsesUp(ReqTypes.COURT_ORDER, 1), UsesUp(ReqTypes.PHYSICIAN_LETTER, 1)],\r\n        outputs: [ReqTypes.PASSPORT]\r\n    }\r\n];\r\n\r\nclass Loader extends React.Component {\r\n\r\n    satisfiesRequirement(req, materials) {\r\n        console.log(req);\r\n        console.log(materials);\r\n        console.log(req instanceof UsesUpType);\r\n        console.log(materials.has(req))\r\n        return (req instanceof UsesUpType && materials.has(req.type)) || materials.has(req);\r\n    }\r\n\r\n    getNextColumn(steps, materials) {\r\n        let nextMaterials = new Set(materials);\r\n        let nextSteps = [];\r\n        let remainingSteps = [];\r\n\r\n        steps.forEach(step => {\r\n            if (step.requirements.map(req => this.satisfiesRequirement(req, materials)).reduce((acc, curr) => acc && curr)) {\r\n                nextSteps.push(step);\r\n                nextMaterials = new Set([...nextMaterials, ...step.outputs]);\r\n            } else {\r\n                remainingSteps.push(step);\r\n            }\r\n        });\r\n\r\n        return {\r\n            nextMaterials: new Set(nextMaterials), nextSteps, remainingSteps\r\n        };\r\n    }\r\n\r\n    getColumns() {\r\n        let columns = [];\r\n        let materials = STARTING_MATERIALS;\r\n        let remainingSteps = STEPS;\r\n        let counter = 0;\r\n        while (counter < 4 && remainingSteps !== []) {\r\n            console.log(materials);\r\n            const next = this.getNextColumn(remainingSteps, materials);\r\n            columns.push(next.nextSteps);\r\n            remainingSteps = next.remainingSteps;\r\n            materials = next.nextMaterials;\r\n            console.log(remainingSteps);\r\n            counter++;\r\n        }\r\n\r\n        return columns;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {this.getColumns().map(\r\n                    (column, index) => (\r\n                        <div className=\"column\" key={index}>\r\n                            {column.map(step => <Step key={step.name} {...step} />)}\r\n                        </div>\r\n                    )\r\n                )}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Loader;","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Loader from './loader';\n\nclass App extends Component {\n  render() {\n    return (\n      <Loader />\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}